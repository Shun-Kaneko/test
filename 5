第五週

プロセス
・プログラム実行の一単位
　実行中のプログラム ＋OSが準備した付帯情報
　プロセスID、ユーザ、親プロセス
普段はps(1)やtop(1)で調査
　CPUやメモリ使用量、ごみプロセスがないか調査

$ ps aux
項目の意味
　USER:	ユーザ、PID:プロセスID、%CPU:CPU使用率,%MEM:メモリ使用率
　VSZ:仮想メモリのサイズ、RSS:使用している物理メモリの量,TTY:端末、
　STAT:プロセスの状態,START:起動した時間、TIME:使ったCPU時間、
　COMMAND:コマンド名、カーネルスレッド名
STATの意味
　R:Run,S:Sleep,D:Disk Sleep,T:Stopped,Z:Zombie,+:forground,<:high priority,
  s:session leader
$ top -c
項目の意味
　PID:プロセスID,USER:ユーザ,PR:優先度,NI:nice値,VIRT:仮想メモリ使用量,RES:物理メモリ使用量,SHR:共有メモリ使用量
　,S:プロセスの状態,%CPU:CPU使用率,%MEM:物理メモリ使用率,TIME+:CPU使用時間,COMMAND:

　　  カーネルから見たプロセス
リソースを割り当てる一単位
　番号(プロセス番号、プロセスID、PID)をつけて管理
プロセスに対する仕事
　生成と消去(メモリの割り当て)
　CPUの利用時間の管理(タイムシェアリング)
　　優先度の高低を考慮
　　　例:端末とのやり取りが多いものほど優先度を高く
　　　↑ロボットを動かすときに問題となる
　　ファイルなどのプロセス外のリソースの提供
　　プログラムが自身のプロセス外のメモリを参照しないように保護
　　　仮想アドレス

　　　　プロセスツリー
プロセスはプロセスから生まれる
　親子関係がある
　家系図(プロセスツリー)ができる
　　pstree(1)で調査を
　　systemdあるいはinitというプロセスからぶら下がる

　　　forkとプロセスの親子関係
fork:あるプロセスが二つに分裂する仕組み
　あるプロセスがforkすると、プロセス番号を除いて全く同じプロセスが二つ同時に走るようになる
　これだけ見ると何のためにあるのか意味不明
fork後のプロセス番号
　一方は元のプロセス番号(親)
　もう一方は新たにプロセス番号をもらう(子)　　

   exec
プロセスの中身がほかのプログラムに変わる仕組み

 シェルがコマンドを実行する仕組み
forkとexecを組み合わせる
　1.シェル自体がforkする
  2.このプロセスがexecを実行してコマンドに化ける
何が便利か?
　コマンドの出力が端末に出てくる
　　端末の入出力の口がforkでコピーされて共有されている
　環境が引き継がれる
　　シェルが日本語環境だとコマンドも日本語環境で動く
考慮しておくべき点
　コマンドを立ち上げるたびにシェルがコピーされる

forkとパイプ
　シェルが自分に入出力すつ口を作ってforkするという処理を繰り返していく
　⇒コマンドが数珠つなぎに

プロセスとメモリ
プロセスは、基本的にほかのプロセスが使っているメモリの中身を見ることができない
　見ることができたら事故ｗ
プロセス間でメモリが見えないようにする仕組み:仮想記憶

仮想記憶(ページング方式)
アドレス空間を二種類用意
　物理アドレス空間(DRAMやそのほかを直接指す)
　仮想アドレス空間(プロセスごとに準備)
アドレス空間を「ページ」に分割
仮想のページと物理ページを対応付け

　仮想記憶で可能となること
fork後も参照しているアドレスが変わらない
別のプロセスのメモリ番地が見えない
lazyな物理メモリ割り当て
　プログラムが割り当てのないページの番地にアクセスした時に、物理メモリのページを割り当て
　割り当てのないページの番地にアクセスすることを「ページフォルト」といい、これが起こると割り当てが起こる
スワップ
　メモリが不足時にページ上のデータをストレージ上のページに追い出せる(スワップアウト)
　仮想アドレスの先が物理メモリである必要がなくなる
キャッシュの管理が簡単に
　プロセスが使用していない物理メモリのページに読み書きしたg￥ファイルのデータを記憶
　キャッシュが有効だとHDDの読み書き回数を減らすことができる

　　ここまでのまとめ
大きなシステムを作るときに大いに参考になる
　fork-exec
　　親のプロセスを丸コピーするという単純で巧妙な方法で環境やリソースの引継ぎが簡単に
　仮想記憶
　　こちらも単純で巧妙な仕組みで効果的なメモリ利用を実現

プロセス番号等の観察
$ ps -eo command,pid,ppid,pgid,sid
　pid:プロセス番号
　ppid:今の親のプロセス番号
　　親が慰安くなると一番にぶら下がる
　pgid:プロセスグループID:同じジョブの下にいるプロセスが共有するID
　sid:セッションID:一つの端末にぶら下がっているプロセスが共有するID

ジョブ
シェルがプロセスを管理する塊

シグナル
プロセス間通信の一種
あるプロセスからほかのプロセスへの「合図」
　ジョブのコントロールでやったCtrl+ZやCtrl+Cでも送られている
シグナルの一覧
　$ kill -l
killコマンドで送ることができる
　$ kill -KILL12345#SIGKILLをPID12345に
　$ kill 12345#SIGTERMをPID12345に
発展
trapを使うとシェルスクリプト内でシグナルを捕捉して割り込み処理が書ける

主なシグナル
SIGHUP(１番)
 HUP:ハングアップ(電話の切断)
　使われ方　
　　端末が切れたときに関連するプロセスを止める
　　　セッションリーダにSIGHUPが飛ぶ
　　　セッションリーダ:セッションIDの持ち主
　　セッションリーダがいなくなるとカーネルからSIGHUPがセッションのプロセスに贈られる
SIGNIT(２番)
　INT:interrupt(割り込み)
　使われ方
　　端末でCtrl+Cを押した時に端末からセッショングループのフォアグラウンドプロセスに送られる
SIGKILL(９番)
　プロセスを強制終了するときに使われる
　プログラム側で後始末できない
　後始末はカーネルに任せる
SIGSEGV１１番()
　メモリのセグメンテーションフォント
SIGPIPE(１３番)
　読み書きしていたパイプの切断
SIGTERM(１５番)
　終わってくれというシグナル。プログラムは速やかに終わらないといけない)

プロセスとファイル
一つのプロセスについて調査したければ/proc/<プロセス番号>を見る
　プロセス情報もファイルで提供される。なんでもファイル

終了ステータス
プロセスが終わるときに親に返す番号
　C言語やC++でプログラミングするときにreturn 0あるいはexit(0)と書いているアレ
　echo $?あるいは(bashなら)　echo $[PIPESTATUS[@]]で確認
用途
　シェアスクリプトでの条件分岐
　ソフトウェアの自動テスト
　　全テストをパスしたら終了ステータス0を返す⇒GitHub等にテスト成功と表示される

