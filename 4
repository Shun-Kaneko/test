//第四回の要点
オペレーティングシステム(OS)
・ハードウェアの複雑さを隠すためのソフト階層
ハードウェアをいじる人間には邪魔かもしれないが使われる
・仕事
抽象化：機械の世界から情報処理の世界へ
資源(リソース)管理
次々に来る「計算機(とその周辺機器)を使いたいという要求」をいかに捌くか

マイコン/OSでの抽象化

・マイコン：メモリアドレスによる抽象化
様々な機器のデータ読み書き口を同じアドレス空間に配置(メモリマップI/O)
ex.ある番地の01を操作すると、ピンの入出力が入れ替わる
メモリの番地を一つずつ書き換える操作

・OS：ファイルによる抽象化
一連のデータを流し込んだり取り出したりできる(ストリーム)
マイコン的なものはOSの本体が受け持ち、ユーザがなるべく触れなくてよいようになっている

プロセス
OSがある＝複数のプログラムを実行可能
OSなしのマイコン制御：一度に一つのプログラムだけ実行
恩恵もあるが複雑になる
複数のプロセスがファイルやメモリ、機器を同時に使いに来るので交通整理が必要

まとめ
OSというものは、なんでもファイルとして扱いプロセスを同時に走らせるためのものらしい

Unix以前
初期の計算機の使われ方
主に科学計算や集計
使用者が計算機の使用時間ををりあてられて、その時間にプログラムを計算機室に打ち込み、
プラグボードやパンチカードを打ち込む

このころの計算機の使い方
初期のころの計算機のオペレーション(バッチシステム)
プログラマがオペレータにプログラムを渡す
　　古くはプラグボード、その後パンチカードや紙テープで
オペレータはもらった順に手でプログラムを計算機にセット
オペレータは計算結果をプログラマに渡す
　　要は流れ作業
バッチシステムを改善したい
１台の計算機で一つの計算しかしない
　割り込みのない(できない)マイコンのようなもの
　割り込んだらオペレータが怒る
人が列をなして待っていないと計算機が止まる
　高価なマシンを遊ばせておきたくない
マルチタスク
1964年ごろ実用
最初のころのマルチタスク
　メモリをパーティション分け(固定)して複数のジョブを置き実行
　　今はメモリやCPUの割り当てをOSがやっている
　メモリをジョブがお互いにのぞかないようにする
　　ハードで実現する方法もあったらしいが、これも現在はOSの仕事
その後、メモリのパーティションが動的に

このころの記憶装置の使い方
パンチカードの延長
　マイコンでのメモリの使い方に近いかもしれない
　　特定の用途のものをテープの範囲を決めて書き込む
　データの中身のｂフォーマットまでOSが関与
　　現在のRDBに近い
　　メインフレーム
階層の表現
　ファイル名を.をつけて区切るなど

タイムシェアリングへ
1960年代
マルチタスクをさらに発展
　時間で区切って複数のジョブでCPUを使いまわす
　プログラム持ち込みのバッチ処理から端末による対話式へ
　　オペレータの仕事がOSの機能に置き換わった
主なプロジェクト
　・CTSS
  ・MULTICS

Unix
MULTICSプロジェクトに参加していたベル研のKen ThompsonらがPDP-7上で開発(1960年代末)
特許ドキュメント管理・作成用
　(単にゲームを動かしたかっただけという説も
MULTI(多方向)→UNI(単方向)
　MULTICSの開発：たくさんの研究組織、研究員
　Unixの開発
　　ドキュメント管理したい(+ゲームをやりたい)という明確な目標
　　３人+αで早く作りたい→シンプルに作りたい

Unixが具現化/受け継いだ機能
階層型ファイルシステム
　ファイル：データ(バイナリ)の塊に名前を付けて管理
　　ディレクトリをたどって読み出す
　デバイスファイル：機能もファイル
プロセス・タイムシェアリング
　複数の処理を同時に走らせる
　仮想記憶、プロセススケジューラ
シェル
　ファイルの操作とプロセスの連携
　重要なこと
OSのプロセスの処理は、最初は人間がやっていた
　１個の処理を人が順番に投入→いつでもコマンド実行
　「いつでもコマンド実行」のためには・・・
　　交通整理が必要
　　データを計算機内に置いておくことが必要⇒OSの仕事
Unix以後、OSの基本的な構造はそんなに変わっていない

Unixの機能以外に重要なこと
オープンソースの走り
　当時AT&Tはコンピュータで商売できない(独禁法)
　そこでコードを配布
⇒企業、研究機関、教育機関に広まる
　バグのレポートや修正
　使えるソフトの増加　
現在GitHubで行われていること

Unix以後
1984年AT&T商売解禁
　ライセンス業を始め、クローズ化
　「Unix戦争」が始まる
余波：配布されたUnixから様々な亜種が誕生
　Unix系OSと呼ばれるもの
　ソースコードの流用
　機能の再現(クローン作り)
Unix系OSの系譜
Unix直系：大雑把に言ってSystem V系とBSD系
　ものによって使用感が異なる
我々がよく使うもの

　組み込みの世界だとBSD系が多い
MINIX,Linux:Unixのコードを含まないが動作はUnix
　MINIX(1987年～)：Unixがクローズ化したためタネンバウムによって教育用に開発

Linux
リーナス・トーバルズがMINIX上で開発(1991年)
　当時ヘルシン大学の大学生
　冬季に部屋に引きこもって開発
　メーリングリストで助言、協力を得ながらゼロから開発
バザール方式
　「伽藍と(がらんと)バザール」
広まった理由
　ゼロから開発したことで制約が少ない
　協力者が多い
　　上からしゃしゃり出てくる人がいないと成功する
　タイミング(PCの普及、Microsoftの影響、ライセンスの問題)

Linuxとディストリビューション
Linuxの構成
　Linuxカーネル(OS本体)
　付属のソフトウェア(コマンド、パッケージシステム、GUI等)
付属のソフトウェアをどういう構成にするかで多数の「ディストリビューション」が派生
主なディストリビューション
三大系統
　Red Hat系
　　RedHat linuxから派生しているもの　ビジネス用途でシェア
　slackware系
　　最古のディストリビューションslackwareから派生
　debian系
　　Debian GNU/Linuxから派生
　　UbuntuもRaspbianもこの系統

後半のまとめ
ソフトウェアには隠して売るという考えのほかに、公開するという考えが存在
　GitHubの使い方そのもの
ソフトウェアの亜種の発生は技術そのものよりも社会的な理由から
　著作権やライセンスに詳しくないと、この辺は理解不可能
我々はリーナスさん+世界中の無数の開発者が作ったものをUbuntuを通して使用

